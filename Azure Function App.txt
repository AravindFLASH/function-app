using System;
using System.Net.Http;
using System.Net.Http.Headers;
using System.Text;
using System.Threading.Tasks;
using Microsoft.Azure.WebJobs;
using Microsoft.Azure.WebJobs.Extensions.Http;
using Microsoft.AspNetCore.Http;
using Microsoft.AspNetCore.Mvc;
using Microsoft.Extensions.Logging;
using Azure.Identity;
using Azure.Security.KeyVault.Secrets;
using Newtonsoft.Json;
using System.Collections.Generic;
 
public static class RotateSecretFunction
{
    private static readonly HttpClient httpClient = new HttpClient();
 
    [FunctionName("RotateSecretFunction")]
    public static async Task<IActionResult> Run(
        [HttpTrigger(AuthorizationLevel.Function, "get", "post", Route = null)] HttpRequest req,
        ILogger log)
    {
        log.LogInformation($"Secret task started.");
        var kvUri = "https://techtroopsdemo.vault.azure.net";
        var secretName = "demo";
        var clientId = ""; // Your app registration client ID
        var tenantId = ""; // Your Azure AD tenant ID
        var clientSecret = ""; // Your app registration client secret
 
        // Get Key Vault secret client
        var secretClient = new SecretClient(new Uri(kvUri), new DefaultAzureCredential());
 
        log.LogInformation($"UpdateAppRegistrationSecret task started.");
        // Generate new secret value
        var newSecretValue = await UpdateAppRegistrationSecret(clientId, secretName, tenantId, clientSecret,  log);
 
        log.LogInformation($"UpdateAppRegistrationSecret task end {newSecretValue}.");
 
        log.LogInformation($"SetSecretAsync task started.");
 
        // Set new secret in Key Vault
        await secretClient.SetSecretAsync(secretName, newSecretValue);
 
        DateTime validationEndTime = DateTime.UtcNow.AddMonths(12); // Set validation end time
 
        KeyVaultSecret secret = new KeyVaultSecret(secretName, newSecretValue);
        secret.Properties.ExpiresOn = validationEndTime;
 
        await secretClient.SetSecretAsync(secret);
 
        log.LogInformation($"SetSecretAsync task end.");
        // Update app registration secret
 
        return new OkObjectResult($"Secret rotation completed successfully at: {DateTime.Now}");
    }
 
    private static string GenerateNewSecretValue()
    {
        // Your logic to generate new secret value
        return Guid.NewGuid().ToString();
    }
 
    private static async Task<string> UpdateAppRegistrationSecret(string clientId, string secretName, string tenantId, string clientSecret,
        ILogger log)
    {
        var token = await GetAccessToken(tenantId, clientId, clientSecret);
        var date = DateTime.Now;
        var sdate = date.ToString("yyyy-MM-dd'T'HH:mm:ss.fffffff'Z'");
        var edate = date.AddMonths(12).ToString("yyyy-MM-dd'T'HH:mm:ss.fffffff'Z'");
        var disname = secretName + date.ToString("yyyyMMdd");
 
        // Create a new password credential
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "https://graph.microsoft.com/v1.0/applications(appId='" + clientId + "')/addPassword");
        request.Headers.Add("Authorization", "Bearer " + token);
        var jsonObject = $@"
        {{
            ""passwordCredential"": {{
                ""displayName"": ""{disname}"",
                ""startDateTime"": ""{sdate}"",
                ""endDateTime"": ""{edate}""
            }}
        }}";
        var content = new StringContent(jsonObject, Encoding.UTF8, "application/json");
        request.Content = content;
        log.LogInformation($"UpdateAppRegistrationSecret task request {request}.");
        log.LogInformation($"UpdateAppRegistrationSecret task request.Headers {request.Headers}.");
        log.LogInformation($"UpdateAppRegistrationSecret task content {content}.");
        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();
 
        var json = await response.Content.ReadAsStringAsync();
        dynamic result = JsonConvert.DeserializeObject(json);
 
        return result.secretText;
    }
 
    private static async Task<string> GetAccessToken(string tenantId, string clientId, string clientSecret)
    {
        var client = new HttpClient();
        var request = new HttpRequestMessage(HttpMethod.Post, "https://login.microsoftonline.com/" + tenantId + "/oauth2/v2.0/token");
        var collection = new List<KeyValuePair<string, string>>
        {
            new KeyValuePair<string, string>("grant_type", "client_credentials"),
            new KeyValuePair<string, string>("client_id", clientId),
            new KeyValuePair<string, string>("scope", "https://graph.microsoft.com/.default"),
            new KeyValuePair<string, string>("client_secret", clientSecret)
        };
        var content = new FormUrlEncodedContent(collection);
        request.Content = content;
        var response = await client.SendAsync(request);
        response.EnsureSuccessStatusCode();
 
        var json = await response.Content.ReadAsStringAsync();
        dynamic result = JsonConvert.DeserializeObject(json);
 
        return result.access_token;
    }
 
    // static async Task<string> GetAppRegistrationSecretName(string clientId, string tenantId, string clientSecret)
    //{
    //    string graphEndpoint = $"https://graph.microsoft.com/v1.0/applications/{clientId}";
 
    //    using (var client = new HttpClient())
    //    {
    //        client.DefaultRequestHeaders.Add("Authorization", $"Bearer {await GetAccessToken(clientId, tenantId, clientSecret)}");
 
    //        var response = await client.GetAsync(graphEndpoint);
 
    //        if (response.IsSuccessStatusCode)
    //        {
    //            var content = await response.Content.ReadAsStringAsync();
    //            var secretName = GetSecretNameFromResponse(content);
    //            return secretName;
    //        }
    //        else
    //        {
    //            Console.WriteLine($"Failed to get application details. Status code: {response.StatusCode}");
    //            return null;
    //        }
    //    }
    //}
 
    //static string GetSecretNameFromResponse(string responseContent)
    //{
    //    // Parse the JSON response to extract the secret name
    //    // Example implementation:
    //    // var jsonObject = Newtonsoft.Json.JsonConvert.DeserializeObject<dynamic>(responseContent);
    //    // var secretName = jsonObject?.passwordCredentials?.[0]?.displayName;
    //    // return secretName;
 
    //    // Replace this with your actual parsing logic based on the JSON structure of the response
    //    return null;
    //}
 
}